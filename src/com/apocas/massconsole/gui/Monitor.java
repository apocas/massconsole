/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Monitor.java
 *
 * Created on Aug 15, 2011, 1:17:35 AM
 */
package com.apocas.massconsole.gui;

import com.apocas.massconsole.Config;
import com.apocas.massconsole.Server;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;

/**
 *
 * @author pedrodias
 */
public class Monitor extends javax.swing.JFrame {

    private ArrayList<ServerGUI> servers = new ArrayList<ServerGUI>();
    private JFileChooser fc = new JFileChooser();
    private GUIDispatcher server_dispatcher;

    /**
     * Creates new form Monitor
     */
    public Monitor() {
        initComponents();
        this.setExtendedState(Frame.MAXIMIZED_BOTH);

        loadStart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SSH Mass Console");
        setSize(new java.awt.Dimension(900, 512));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(73, 444));
        jPanel1.setLayout(new java.awt.GridLayout(4, 0));

        jButton1.setEnabled(false);
        jPanel1.add(jButton1);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Add servers from file");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem9.setText("Save to log");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem2.setText("Disconnect all and exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Config");

        jMenuItem11.setText("Print to console");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem6.setText("Set font size");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Set font gap");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Set font init gap");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectAll() {
        for (ServerGUI sg : servers) {
            sg.stop();
        }
    }

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    loadStart();
}//GEN-LAST:event_jMenuItem1ActionPerformed
private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
// TODO add your handling code here:
    this.disconnectAll();
    System.exit(0);
}//GEN-LAST:event_jMenuItem2ActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
    this.disconnectAll();
}//GEN-LAST:event_formWindowClosing

private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
    String s = (String) JOptionPane.showInputDialog(
            this,
            "Font size",
            "Font size",
            JOptionPane.PLAIN_MESSAGE,
            null,
            null,
            "" + Config.font_size);
    if (s != null && !s.isEmpty()) {
        Config.font_size = Integer.parseInt(s);
    }
}//GEN-LAST:event_jMenuItem6ActionPerformed

private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
    String s = (String) JOptionPane.showInputDialog(
            this,
            "Font gap",
            "Font gap",
            JOptionPane.PLAIN_MESSAGE,
            null,
            null,
            "" + Config.font_gap);
    if (s != null && !s.isEmpty()) {
        Config.font_gap = Integer.parseInt(s);
    }
}//GEN-LAST:event_jMenuItem7ActionPerformed

private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
    String s = (String) JOptionPane.showInputDialog(
            this,
            "Font init gap",
            "Font gap",
            JOptionPane.PLAIN_MESSAGE,
            null,
            null,
            "" + Config.font_init_gap);
    if (s != null && !s.isEmpty()) {
        Config.font_init_gap = Integer.parseInt(s);
    }
}//GEN-LAST:event_jMenuItem8ActionPerformed

private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
// TODO add your handling code here:
    int n = JOptionPane.showConfirmDialog(
            this,
            "Print to console?",
            "Console",
            JOptionPane.YES_NO_OPTION);
    if (n == JOptionPane.YES_OPTION) {
        Config.print_console = true;
    } else {
        Config.print_console = false;
    }
}//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            if ("clear".equals(jTextField1.getText())) {
                for (ServerGUI sg : servers) {
                    sg.getJT().setText("");
                    sg.repaint();
                }
            } else {
                for (ServerGUI sg : servers) {
                    if (sg.getServer().isConnected()) {
                        try {
                            sg.getServer().sendCommand(jTextField1.getText());
                        } catch (IOException ex) {
                            Logger.getLogger(Monitor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
            jTextField1.setText("");
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        String log = "";
        for (ServerGUI sg : servers) {
            String sname = sg.getServer().getName();
            String slog = sg.getJT().getText();

            log += "########\n" + sname + "\n########\n";
            log += slog + "\n";
        }

        JFileChooser fc = new JFileChooser(JFileChooser.FILE_FILTER_CHANGED_PROPERTY);

        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileSaver(fc, log);
        } else {
            JOptionPane.showMessageDialog(this, "Save Cancelled.", "Save Cancelled", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void fileSaver(JFileChooser fc, String txt) {
        File file = fc.getSelectedFile();
        String textToSave = txt;
        BufferedWriter writer = null;

        try {
            writer = new BufferedWriter(new FileWriter(file));
            writer.write(textToSave);
            JOptionPane.showMessageDialog(this, "Message saved. (" + file.getName() + ")",
                    "Log Saved", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
            }
        }
    }

    public void loadStart() {
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (Config.password == null || Config.password.isEmpty()) {
                JPasswordField passwordField = new JPasswordField();
                passwordField.setEchoChar('*');
                Object[] obj = {"Please enter the password:\n\n", passwordField};
                Object stringArray[] = {"OK", "Cancel"};
                if (JOptionPane.showOptionDialog(null, obj, "SSH Key password",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray, obj) == JOptionPane.YES_OPTION) {
                    Config.password = new String(passwordField.getPassword()).trim();
                }
            }

            FileInputStream fstream = null;

            try {
                fstream = new FileInputStream(fc.getSelectedFile());
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                while ((strLine = br.readLine()) != null) {
                    if (strLine.length() > 4) {
                        String aux[] = strLine.split("@");
                        String aux2[] = aux[1].split(";");
                        ServerGUI sg = new ServerGUI(new Server(aux2[0], aux[0], aux2[1]));
                        servers.add(sg);
                    }
                }

                in.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            jPanel1.remove(jButton1);
            server_dispatcher = new GUIDispatcher(jPanel1, servers);
            new Thread(server_dispatcher).start();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Monitor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Monitor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Monitor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Monitor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Monitor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
